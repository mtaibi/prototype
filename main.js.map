{"version":3,"sources":["./src/app/methodik-artefakt-design-science-research/methodik-artefakt-design-science-research.component.ts","./src/app/dozent-detail/dozent-detail.component.html","./src/app/dozent-detail/dozent-detail.component.ts","./src/app/studenten/studenten.component.ts","./src/app/studenten/studenten.component.html","./src/app/main-nav/main-nav.component.ts","./src/app/main-nav/main-nav.component.html","./src/app/dozenten/dozenten.component.html","./src/app/dozenten/dozenten.component.ts","./src/app/rest-crud-http/rest-crud-http.component.ts","./src/environments/environment.ts","./src/app/forschungsfrage/forschungsfrage.component.ts","./src/app/fazit/fazit.component.ts","./src/app/one-way-binding/one-way-binding.component.ts","./src/app/erklaerung-mvc-mvvm-etc/erklaerung-mvc-mvvm-etc.component.ts","./src/app/datenbindung/datenbindung.component.ts","./src/app/architektur-konzept/architektur-konzept.component.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/two-way-binding/two-way-binding.component.ts","./src/app/datenhaltung/datenhaltung.component.ts","./src/app/app.module.ts","./src/app/material/material.module.ts","./src/app/einleitung/einleitung.component.ts","./src/app/datenbindungen-typen/datenbindungen-typen.component.ts","./src/app/form/form.component.ts","./src/app/form/form.component.html","./src/app/angular/angular.component.ts","./src/app/app-routing.module.ts","./src/app/dozent.ts","./src/app/dozent.service.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-erklaerung-artefakt-design-science-research',\n  template: `\n    <p>\n    Die Forschungsfrage wird in der vorliegenden Seminararbeit anhand von vorhandener Literatur zu Entwurfsmustern, objektorientierter Programmierung sowie der Dokumentation zu Angular betrachtet. Die praktische Umsetzung erfolgt anhand eines in Angular programmierten Prototypen, der die im Folgenden beschriebenen Methoden zur Datenbindung sowie Datenhaltung demonstriert.    </p>\n  `,\n  styles: [\n  ]\n})\nexport class MethodikArtefaktDesignScienceResearchComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","  <div *ngIf=\"dozent\">\n\n    <h2>{{dozent.nachname | uppercase}} Details</h2>\n  <div><span>id: </span>{{dozent.id}}</div>\n  <div>\n    <label for=\"dozent-vorname\">Dozent name: </label>\n    <input id=\"dozent-name\"  [(ngModel)]=\"dozent.nachname\" placeholder=\"nachname\">\n  </div>\n</div>\n\n\n","import { Component, OnInit, Input } from '@angular/core';\nimport { Dozent } from '../dozent'\n\n@Component({\n  selector: 'app-dozent-detail',\n  templateUrl: './dozent-detail.component.html',\n  styleUrls: ['./dozent-detail.component.css']\n})\n\n\nexport class DozentDetailComponent implements OnInit {\n\n  @Input() dozent?: Dozent;\n\n  constructor() {}\n\n  ngOnInit(): void {\n  }\n\n\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Student } from '../student';\n\n@Component({\n  selector: 'app-studenten',\n  templateUrl: './studenten.component.html',\n  styleUrls: ['./studenten.component.css']\n})\nexport class StudentenComponent implements OnInit {\n\n  student: Student = {\n    id: 1,\n    vorname: 'Murad',\n    nachname: 'Taibi',\n    matrikelnummer: 490215\n  };\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","\n<div>\n  <p>\n    Geben Sie die Daten des Studenten ein:\n  </p>\n  <br>\n  <p>Student</p>\n  <label for=\"studentNachname\">Nachname: </label><br>\n  <input id=\"studentNachnameId\" [(ngModel)]=\"student.nachname\"><br>\n  <label for=\"studentVorname\">Vorname: </label><br>\n  <input id=\"studentVornameId\" [(ngModel)]=\"student.vorname\">\n</div>\n<br>\n<div>\n  <p> Two-Way-Databinding stellt in beide Richtungen die Verbindung zwischen den HTML-Elementen im HTML-Dokument und in Template-Dateien sowie den Daten und dem Code in der Anwendung her.</p>\n\n  <h3><b>Ihre oben gemachte Eingabe lautet: </b></h3>\n   {{student.vorname}} {{student.nachname}}\n</div>\n","import { Component } from '@angular/core';\nimport { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';\nimport { Observable } from 'rxjs';\nimport { map, shareReplay } from 'rxjs/operators';\nimport { RouterModule, Routes } from '@angular/router';\n\n\n@Component({\n  selector: 'app-main-nav',\n  templateUrl: './main-nav.component.html',\n  styleUrls: ['./main-nav.component.css']\n})\nexport class MainNavComponent {\n\n  isHandset$: Observable<boolean> = this.breakpointObserver.observe(Breakpoints.Handset)\n    .pipe(\n      map(result => result.matches),\n      shareReplay()\n    );\n\n  constructor(private breakpointObserver: BreakpointObserver) {}\n\n}\n","<mat-sidenav-container class=\"sidenav-container\">\n  <mat-sidenav #drawer class=\"sidenav\" fixedInViewport\n      [attr.role]=\"(isHandset$ | async) ? 'dialog' : 'navigation'\"\n      mode='side'\n      [opened]= \"true\" disableClose=\"true\">\n    <mat-toolbar>Gliederung</mat-toolbar>\n    <mat-nav-list>\n      <a routerLink=\"/einleitung\" routerLinkActive=\"active\">1.) Einleitung</a>\n      <a routerLink=\"/erklaerung-mvc-mvvm-etc\" routerLinkActive=\"active\">1.1) Erklärung MVC, MVVM, etc.</a>\n      <a routerLink=\"/methodik-artefakt-design-science-research\" routerLinkActive=\"active\">1.2) Methodik / Artefakt (Design Science Research)</a>\n      <a routerLink=\"/forschungsfrage\" routerLinkActive=\"active\">1.3) (Forschungs)frage</a>\n      <a routerLink=\"/angular\" routerLinkActive=\"active\">2.) Angular</a>\n      <a routerLink=\"/architektur-konzept\" routerLinkActive=\"active\">2.1) Architektur und Konzept</a>\n      <a routerLink=\"/datenbindung\" routerLinkActive=\"active\">3.) Datenbindung</a>\n      <a routerLink=\"/one-way-binding\" routerLinkActive=\"active\">3.1) One-Way-Binding</a>\n      <a routerLink=\"/two-way-binding\" routerLinkActive=\"active\">3.2) Two-Way-Binding</a>\n      <a routerLink=\"/datenhaltung\" routerLinkActive=\"active\">4.) Datenhaltung</a>\n      <a routerLink=\"/rest-crud-http\" routerLinkActive=\"active\">4.1) HTTP</a>\n    </mat-nav-list>\n  </mat-sidenav>\n  <mat-sidenav-content>\n    <mat-toolbar >Kapitelinhalt</mat-toolbar>\n    <router-outlet></router-outlet>\n  </mat-sidenav-content>\n</mat-sidenav-container>\n\n\n\n","\n<hr>\n\n<app-form></app-form>\n<hr>\n\n<h3>Dozenten - Übersicht (nach einer Eingabe bitte mit <b>F5</b> aktualisieren! Sorry, nicht genug Zeit gehabt und dazu schlecht den Code schlecht strukturiert :-(... )</h3>\n\n<ul class=\"dozenten\">\n  <li *ngFor=\"let dozent of dozenten\"\n    [class.selected]=\"dozent === selectedDozent\"\n    (click)=\"onSelect(dozent)\">\n    <span class=\"badge\">{{dozent.id}}</span>{{dozent.vorname}}, {{dozent.nachname}}\n  </li>\n</ul>\n<hr>\n\n\n\n\n\n\n\n\n\n\n","import { Component, NgModule, OnInit } from '@angular/core';\nimport { Dozent } from '../dozent';\nimport { DozentService } from '../dozent.service';\nimport { FormsModule } from '@angular/forms';\nimport { MaterialModule } from '../material/material.module';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { environment } from 'src/environments/environment';\n\n@Component({\n  selector: 'app-dozenten',\n  templateUrl: './dozenten.component.html',\n  styleUrls: ['./dozenten.component.css']\n})\nexport class DozentenComponent implements OnInit {\n\n  dozenten: Dozent[]=[];\n  selectedDozent?: Dozent;\n  newDozent: Dozent;\n\n\n\n\n  constructor(private dozentService: DozentService) {\n    this.selectedDozent = this.newDozent\n  }\n\n  ngOnInit(): void {\n    this.getDozenten();\n  }\n\n  onSelect(dozent: Dozent): void {\n    this.selectedDozent = dozent;\n  }\n\n  getDozenten(): void {\n    this.dozentService.getDozenten()\n        .subscribe(dozenten => this.dozenten = dozenten);\n  }\n\n  createDozent(): void{\n    this.dozentService.create(this.newDozent);\n  }\n}\n","import { Component, NgModule, OnInit } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Student } from '../student';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'app-rest-crud-http',\n  template: `\n  <p>Mit der Version 4.3.1 wurde in Angular eine neue Version des HttpClient einge-führt, der sich am für eine Web-Anwendung typischen Einsatz orientiert und um den HttpInterceptor erweitert wurde <br>\n    und das Abfangen von Http-Request sowie Http-Response gestattet. Dies ermöglicht dem Programmierer die entsprechenden Parameter und Header weiter zu spezifizieren und darauf reagieren zu können.<br>\n    Beispielsweise können so Diagnose-, Zustands-, Authentifizierunginformationen oder auch Fehlerbehandlungen eingebunden werden. Ein klassisches Beispiel ist hier zum Beispiel die Einbindung von\n    Ladebalken während eines Ladevorgangs. Durch die einmalige Einbindung des HttpInterceptors in die Root-Komponente einer Anwendung ist dieser systemweit nutzbar und kann in flexibel in <br>\n    entsprechende Module eingebunden werden, beispielsweise um einen trägen Ladevor-gang dieses Moduls untersuchen zu können.\n </p>\n\n  <app-dozenten></app-dozenten>\n\n  `,\n  styles: [\n  ],\n})\n\nexport class RestCrudHttpComponent implements OnInit {\n\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: true,\n  dozentEndpoint: 'https://mtaibi.github.io/hausarbeit/'\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-forschungsfrage',\n  template: `\n    <p>\n    Wie kann mit Angular der Datenfluss gestaltet und dabei der Datenverbrauch minimiert werden?    </p>\n    <img src=\"assets/Logo.jpg\" alt=\"\">\n  `,\n  styles: [\n  ]\n})\nexport class ForschungsfrageComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-fazit',\n  template: `\n    <p>\n      fazit works!\n    </p>\n  `,\n  styles: [\n  ]\n})\nexport class FazitComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-one-way-binding',\n  template: `\n\n      <p>Vom Model (title, title2, student, matrikelnummer, dozent): </p>\n      <img src=\"/assets/oneWayBinding2.jpg\" alt=\"\"><br>\n      <br>\n      <p>In die View (das Ergebnis sehen Sie ganz oben auf der \"Start-HTML\"):</p>\n      <img src=\"/assets/oneWayBinding1.jpg\" alt=\"\">\n\n  `,\n  styles: [\n  ]\n})\nexport class OneWayBindingComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-erklaerung-mvc-mvvm-etc',\n  template: `\n    <p>\n    Der überwiegende Teil der Funktionalitäten von objektorientierten Systemen spielt sich im Zusammenspiel von Geschäftslogik, Ansicht sowie Steuerung mit dem User ab.\n    Das wichtigste Architekturmuster für die Präsentation von objektorientierten Applikatio-nen stellt hierbei die MVC-Architektur dar. Das Model steht hierbei für die\n    Daten der Anwendung sowie alle Operationen darauf wie beispielsweise deren Speicherung.\n    Die Aufgabe der View besteht in der Darstellung der Daten des Models.\n    Der Controller nimmt schlussendlich die Eingaben des Users entgegen, leitet diese an die Views sowie an das Model weiter und verbindet dadurch das Model mit dem Nutzer.\n\n    </p>\n    <img src=\"/assets/MVC.jpg\" alt=\"image\">\n  `,\n  styles: [\n  ]\n})\nexport class ErklaerungMvcMvvmEtcComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-datenbindung',\n  template: `\n    <br>\n    <p>\n    Datenbindungen sind in Vorlagen eingebettete Ausdrücke, die ausgewertet werden, um dynamische Inhalte im HTML-Dokument zu erzeugen.<br>\n    <br>\n    Datenbindungen stellen die Verbindung zwischen den HTML-Elementen im HTML Dokument und in Template-Dateien mit den Daten und dem Code in der Anwendung.<br>\n    <br>\n    Datenbindungen werden angewendet als Attribute auf HTML-Elemente oder als spezielle Zeichenfolgen von Zeichen in Zeichenketten.\n    </p>\n    <img src=\"/assets/Datenbindung.jpg\" alt=\"\">\n  `,\n  styles: [\n  ]\n})\nexport class DatenbindungComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","import { Component, OnInit } from '@angular/core';\n\n\n@Component({\n  selector: 'app-architektur-konzept',\n  template: `\n    <p>\n    Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.\n    </p>\n  `,\n  styles: [\n  ]\n})\nexport class ArchitekturKonzeptComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'Hausarbeit - strategische IT-Entwicklung & Trends';\n  title2 = 'Datenbindung und Datenhaltung mit Angular';\n  student = 'Student: Murad Taibi';\n  matrikelnummer = 'Matrikelnummer: 490215';\n  dozent = 'Dozent: Prof. Dr. Klaus Wilderotter';\n  opened = false;\n\n  log(state){\n    console.log(state)\n  }\n\n\n}\n","<h1>{{title}}</h1>\n<h2>{{title2}}</h2>\n<h2>{{student}}</h2>\n<h2>{{matrikelnummer}}</h2>\n<h2>{{dozent}}</h2>\n<app-main-nav></app-main-nav>\n\n\n\n\n","import { Component, OnInit } from '@angular/core';\nimport {StudentenComponent } from '../studenten/studenten.component'\n\n@Component({\n  selector: 'app-two-way-binding',\n  template: `\n  <br>\n  <app-studenten></app-studenten>\n   <!-- <input [(ngModel)]=\"name\"  type=\"text\">\n    <img src=\"/assets/twoWayBinding.jpg\" alt=\"Two-Way-Binding\">\n    {{name}}-->\n  <br>\n  <p> Two-Way-Databinding stellt die Verbindung zwischen den HTML-Elementen im HTML Dokument und in Template-Dateien mit den Daten und dem Code in der Anwendung</p>\n  <br>\n\n  `,\n  styles: []\n})\nexport class TwoWayBindingComponent implements OnInit {\n\n  student\n\n  public name=\"\";\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-datenhaltung',\n  template: `\n    <p>\n    Ein wichtiges Prinzip der Service-orientierten Architektur bzw. SPA ist die Kommunika-tion zwischen View, Model und ViewModel sowie der hierfür notwendige Datenfluss.\nHierbei kommen zwei Kommunikationsmustern zum Einsatz, One-Way-Binding sowie auch Two-Way-Binding, wobei hier nach vier Aspekten unterschieden werden muss [2, p. 396]:<br>\n•\tRückmeldung über den Miss-/Erfolg des Datenaufrufs<br>\n•\tRückmeldung über das Ergebnis des Datenaufrufs<br>\n•\tRückmeldung außerhalb der Anfrage zu einem späteren Zeitpunkt (Asynchronität)<br>\n•\tAufbau einer Sitzung: exklusive Nutzung durch einen einzelnen Service<br>\n    </p>\n  `,\n  styles: [\n  ]\n})\nexport class DatenhaltungComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { FormsModule } from '@angular/forms';\nimport { AppRoutingModule, routingComponents } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { MaterialModule } from './material/material.module';\nimport { ErklaerungMvcMvvmEtcComponent } from './erklaerung-mvc-mvvm-etc/erklaerung-mvc-mvvm-etc.component';\nimport { MainNavComponent } from './main-nav/main-nav.component';\nimport { LayoutModule } from '@angular/cdk/layout';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatListModule } from '@angular/material/list';\nimport { StudentenComponent } from './studenten/studenten.component';\nimport { DozentenComponent } from './dozenten/dozenten.component';\nimport { DozentDetailComponent } from './dozent-detail/dozent-detail.component';\nimport { FormComponent } from './form/form.component';\n\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    routingComponents,\n    ErklaerungMvcMvvmEtcComponent,\n    MainNavComponent,\n    StudentenComponent,\n    DozentenComponent,\n    DozentDetailComponent,\n    FormComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    HttpClientModule,\n    BrowserAnimationsModule ,\n    MaterialModule,\n    FormsModule,\n    LayoutModule,\n    MatToolbarModule,\n    MatButtonModule,\n    MatSidenavModule,\n    MatIconModule,\n    MatListModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { NgModule } from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport {MatButtonToggleModule} from '@angular/material/button-toggle';\nimport {MatCardModule} from '@angular/material/card';\nimport {MatCheckboxModule} from '@angular/material/checkbox';\nimport {MatChipsModule} from '@angular/material/chips';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDatepickerModule} from '@angular/material/datepicker';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatDividerModule} from '@angular/material/divider';\nimport {MatExpansionModule} from '@angular/material/expansion';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatGridListModule} from '@angular/material/grid-list';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatInputModule} from '@angular/material/input';\nimport {MatListModule} from '@angular/material/list';\nimport {MatMenuModule} from '@angular/material/menu';\nimport {MatPaginatorModule} from '@angular/material/paginator';\nimport {MatProgressBarModule} from '@angular/material/progress-bar';\nimport {MatProgressSpinnerModule} from '@angular/material/progress-spinner';\nimport {MatRadioModule} from '@angular/material/radio';\nimport {MatRippleModule} from '@angular/material/core';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatSidenavModule} from '@angular/material/sidenav';\nimport {MatSlideToggleModule} from '@angular/material/slide-toggle';\nimport {MatSliderModule} from '@angular/material/slider';\nimport {MatSnackBarModule} from '@angular/material/snack-bar';\nimport {MatSortModule} from '@angular/material/sort';\nimport {MatStepperModule} from '@angular/material/stepper';\nimport {MatTableModule} from '@angular/material/table';\nimport {MatTabsModule} from '@angular/material/tabs';\nimport {MatToolbarModule} from '@angular/material/toolbar';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatTreeModule} from '@angular/material/tree';\n\nconst MaterialComponents = [\n  MatButtonModule,\n  MatButtonToggleModule,\n  MatCardModule,\n  MatCheckboxModule,\n  MatChipsModule,\n  MatCommonModule,\n  MatDatepickerModule,\n  MatDialogModule,\n  MatDividerModule,\n  MatExpansionModule,\n  MatFormFieldModule,\n  MatGridListModule,\n  MatSidenavModule,\n  MatTreeModule,\n  MatTableModule\n];\n\n@NgModule({\n  imports: [MaterialComponents],\n  exports: [MaterialComponents]\n})\nexport class MaterialModule { }\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-einleitung',\n  template: `\n    <p>\n    Stand Januar 2021 nutzten weltweit mehr als 5,22 Milliarden Menschen ein Mobiltelefon sowie mehr als 4,66 Milliarden Menschen das Internet.\n    Die schiere Menge an Nutzern und Clients sowie der Nutzung von serviceorientierte Architekturen stellt <br>\n    die Entwickler jedoch vor einige Schwierigkeiten in der verteilten Datenhaltung.\n    Als grundlegende Probleme lassen sich die Zuverlässigkeit von Netzwerken, die zur Verfügung stehende Bandbreite, Netzwerktopologien (wie z.B. UMTS, LTE, 5G, WLAN – auch im Wechsel), „Kosten“ für den Datentransport sowie die Netzwerksicherheit identifizieren. [2]\n    <br>\n    <br>\n\n    <img src=\"/assets/statistik.png\" height=\"500px\" width=\"800px\">\n  `,\n  styles: [\n  ]\n})\nexport class EinleitungComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-datenbindungen-typen',\n  template: `\n    <p>\n    Datenbindungen sind in Vorlagen eingebettete Ausdrücke, die ausgewertet werden, um dynamische Inhalte im HTML-Dokument zu erzeugen.<br>\n    Datenbindungen stellen die Verbindung zwischen den HTML-Elementen im HTML Dokument und in Template-Dateien mit den Daten und dem Code in der Anwendung.<br>\n    </p>\n  `,\n  styles: [\n  ]\n})\nexport class DatenbindungenTypenComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Dozent } from '../dozent';\nimport { FormsModule } from '@angular/forms';\nimport { DozentService } from '../dozent.service';\n\n@Component({\n  selector: 'app-form',\n  templateUrl: './form.component.html',\n  styleUrls: ['./form.component.css']\n})\nexport class FormComponent implements OnInit {\n\n  dozentModel = new Dozent();\n  dozenten: Dozent[]=[];\n  selectedDozent?: Dozent;\n  newDozent: Dozent;\n\n  constructor(private dozentService: DozentService) {}\n\n  ngOnInit(): void {\n    this.dozentService.getDozenten();\n  }\n\n  onSubmit(){\n    this.dozentService.create(this.dozentModel)\n    .subscribe(\n      data => console.log(\"success\", data)\n    )\n    this.dozentService.getDozenten();\n  }\n}\n","<div class=\"container-fluid\">\n  <h3>HTTP-Beispiel</h3>\n  <p>Hier können Sie beispielsweise einen neuen Dozenten erfassen. Aus zeitlichen Gründen konnte ich lediglich die POST-Methode implementieren. Die eingegebenen Daten werden in einem JSON-Server gespeichert. Zur Aktualisierung der Liste bitte F5 drücken!</p>\n  <form #dozentForm=\"ngForm\" (ngSubmit)=\"onSubmit()\" novalidate>\n\n    <div class=\"form-group\">\n      <input  type=\"number\"\n              class=\"form-control\"\n              placeholder=\"ID\"\n              [(ngModel)]=\"dozentModel.id\"\n              name=\"id\"\n              >\n\n      <input  type=\"text\"\n              class=\"form-control\"\n              placeholder=\"Vorname\"\n              [(ngModel)]=\"dozentModel.vorname\"\n              name=\"vorname\"\n              >\n\n      <input  type=\"text\"\n              class=\"form-control\"\n              placeholder=\"Nachname\"\n              [(ngModel)]=\"dozentModel.nachname\"\n              name=\"nachname\"\n              >\n\n<button class=\"btn btn-primary\" type=\"submit\">Speichern</button>\n    </div>\n  </form>\n</div>\n\n\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-angular',\n  template: `\n    <p>\n    Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.\n    </p>\n  `,\n  styles: [\n  ]\n})\nexport class AngularComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { AngularComponent } from './angular/angular.component';\nimport { ArchitekturKonzeptComponent } from './architektur-konzept/architektur-konzept.component';\nimport { DatenbindungComponent } from './datenbindung/datenbindung.component';\nimport { DatenbindungenTypenComponent } from './datenbindungen-typen/datenbindungen-typen.component';\nimport { DatenhaltungComponent } from './datenhaltung/datenhaltung.component';\nimport { EinleitungComponent } from './einleitung/einleitung.component';\nimport { MethodikArtefaktDesignScienceResearchComponent } from './methodik-artefakt-design-science-research/methodik-artefakt-design-science-research.component';\nimport { FazitComponent } from './fazit/fazit.component';\nimport { ForschungsfrageComponent } from './forschungsfrage/forschungsfrage.component';\nimport { OneWayBindingComponent } from './one-way-binding/one-way-binding.component';\nimport { RestCrudHttpComponent } from './rest-crud-http/rest-crud-http.component';\nimport { TwoWayBindingComponent } from './two-way-binding/two-way-binding.component';\nimport { ErklaerungMvcMvvmEtcComponent } from './erklaerung-mvc-mvvm-etc/erklaerung-mvc-mvvm-etc.component';\nimport { StudentenComponent } from './studenten/studenten.component';\n\nconst routes: Routes = [\n  {path: 'einleitung', component: EinleitungComponent},\n  {path: 'angular', component: AngularComponent},\n  {path: 'architektur-konzept', component: ArchitekturKonzeptComponent},\n  {path: 'datenbindung', component: DatenbindungComponent},\n  {path: 'datenbindungen-typen', component: DatenbindungenTypenComponent},\n  {path: 'datenhaltung', component: DatenhaltungComponent},\n  {path: 'methodik-artefakt-design-science-research', component: MethodikArtefaktDesignScienceResearchComponent},\n  {path: 'fazit', component: FazitComponent},\n  {path: 'forschungsfrage', component: ForschungsfrageComponent},\n  {path: 'one-way-binding', component: OneWayBindingComponent},\n  {path: 'two-way-binding', component: StudentenComponent},\n  {path: 'rest-crud-http', component: RestCrudHttpComponent},\n  {path: 'erklaerung-mvc-mvvm-etc', component: ErklaerungMvcMvvmEtcComponent},\n\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\nexport const routingComponents = [\n  EinleitungComponent,\n  AngularComponent,\n  ArchitekturKonzeptComponent,\n  DatenbindungComponent,\n  DatenbindungenTypenComponent,\n  DatenhaltungComponent,\n  MethodikArtefaktDesignScienceResearchComponent,\n  FazitComponent,\n  ForschungsfrageComponent,\n  OneWayBindingComponent,\n  TwoWayBindingComponent,\n  RestCrudHttpComponent\n]\n","export class Dozent {\r\n  public id: number;\r\n  public vorname: string;\r\n  public nachname: string\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { Dozent } from './dozent';\nimport { BehaviorSubject, Observable, of } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\nimport { environment } from 'src/environments/environment';\nimport { tap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DozentService {\n\n  list: BehaviorSubject<Dozent[]> = new BehaviorSubject([]);\n\n  constructor(private http: HttpClient) {\n\n  }\n  getDozenten(): Observable<Dozent[]>{\n    return this.http.get<Dozent[]>(environment.dozentEndpoint)\n      .pipe(\n        tap(dozenten => this.list.next(dozenten))\n      );\n  }\n\n  getDozentenByName(name: string): Dozent | undefined {\n    return this.list.getValue().find (value => {\n      return `${value.vorname} ${value.nachname}` === name;\n    })\n  }\n\n  getDozentenById(id: number): Observable<Dozent> {\n    return this.http.get<Dozent>(`${environment.dozentEndpoint}/${id}`)\n  }\n\n  create (dozent: Dozent): Observable<Dozent> {\n    return this.http.post<Dozent>(environment.dozentEndpoint, dozent)\n    .pipe(\n      tap (createdDoz => this.getDozenten().subscribe() )\n    );\n  }\n}\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}